// Code generated by MockGen. DO NOT EDIT.
// Source: libs/database/mongo/service_db/nodes.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/curtis0505/bridge/libs/database/mongo/service_db"
	gomock "github.com/golang/mock/gomock"
)

// MockNodesRepository is a mock of NodesRepository interface.
type MockNodesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNodesRepositoryMockRecorder
}

// MockNodesRepositoryMockRecorder is the mock recorder for MockNodesRepository.
type MockNodesRepositoryMockRecorder struct {
	mock *MockNodesRepository
}

// NewMockNodesRepository creates a new mock instance.
func NewMockNodesRepository(ctrl *gomock.Controller) *MockNodesRepository {
	mock := &MockNodesRepository{ctrl: ctrl}
	mock.recorder = &MockNodesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodesRepository) EXPECT() *MockNodesRepositoryMockRecorder {
	return m.recorder
}

// FindNodes mocks base method.
func (m *MockNodesRepository) FindNodes(ctx context.Context, filter any) ([]*models.Nodes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNodes", ctx, filter)
	ret0, _ := ret[0].([]*models.Nodes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNodes indicates an expected call of FindNodes.
func (mr *MockNodesRepositoryMockRecorder) FindNodes(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNodes", reflect.TypeOf((*MockNodesRepository)(nil).FindNodes), ctx, filter)
}
