// Code generated by MockGen. DO NOT EDIT.
// Source: libs/database/mongo/account_db/addresses.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/curtis0505/bridge/libs/database/mongo/account_db"
	gomock "github.com/golang/mock/gomock"
	bson "go.mongodb.org/mongo-driver/bson"
	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockAddressesRepository is a mock of AddressesRepository interface.
type MockAddressesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAddressesRepositoryMockRecorder
}

// MockAddressesRepositoryMockRecorder is the mock recorder for MockAddressesRepository.
type MockAddressesRepositoryMockRecorder struct {
	mock *MockAddressesRepository
}

// NewMockAddressesRepository creates a new mock instance.
func NewMockAddressesRepository(ctrl *gomock.Controller) *MockAddressesRepository {
	mock := &MockAddressesRepository{ctrl: ctrl}
	mock.recorder = &MockAddressesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddressesRepository) EXPECT() *MockAddressesRepositoryMockRecorder {
	return m.recorder
}

// CountAddresses mocks base method.
func (m *MockAddressesRepository) CountAddresses(ctx context.Context, filter bson.M, opts ...*options.CountOptions) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountAddresses", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAddresses indicates an expected call of CountAddresses.
func (mr *MockAddressesRepositoryMockRecorder) CountAddresses(ctx, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAddresses", reflect.TypeOf((*MockAddressesRepository)(nil).CountAddresses), varargs...)
}

// FindAddresses mocks base method.
func (m *MockAddressesRepository) FindAddresses(ctx context.Context, filter bson.M, opts ...*options.FindOptions) ([]*models.Addresses, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAddresses", varargs...)
	ret0, _ := ret[0].([]*models.Addresses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAddresses indicates an expected call of FindAddresses.
func (mr *MockAddressesRepositoryMockRecorder) FindAddresses(ctx, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAddresses", reflect.TypeOf((*MockAddressesRepository)(nil).FindAddresses), varargs...)
}

// FindOneAddresses mocks base method.
func (m *MockAddressesRepository) FindOneAddresses(ctx context.Context, filter bson.M, opts ...*options.FindOneOptions) (*models.Addresses, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOneAddresses", varargs...)
	ret0, _ := ret[0].(*models.Addresses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneAddresses indicates an expected call of FindOneAddresses.
func (mr *MockAddressesRepositoryMockRecorder) FindOneAddresses(ctx, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneAddresses", reflect.TypeOf((*MockAddressesRepository)(nil).FindOneAddresses), varargs...)
}

// UpdateOneAddresses mocks base method.
func (m *MockAddressesRepository) UpdateOneAddresses(ctx context.Context, filter, update any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOneAddresses", ctx, filter, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOneAddresses indicates an expected call of UpdateOneAddresses.
func (mr *MockAddressesRepositoryMockRecorder) UpdateOneAddresses(ctx, filter, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOneAddresses", reflect.TypeOf((*MockAddressesRepository)(nil).UpdateOneAddresses), ctx, filter, update)
}
