// Code generated by MockGen. DO NOT EDIT.
// Source: libs/database/mongo/account_db/accounts.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/curtis0505/bridge/libs/database/mongo/account_db"
	gomock "github.com/golang/mock/gomock"
	bson "go.mongodb.org/mongo-driver/bson"
	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockAccountsRepository is a mock of AccountsRepository interface.
type MockAccountsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountsRepositoryMockRecorder
}

// MockAccountsRepositoryMockRecorder is the mock recorder for MockAccountsRepository.
type MockAccountsRepositoryMockRecorder struct {
	mock *MockAccountsRepository
}

// NewMockAccountsRepository creates a new mock instance.
func NewMockAccountsRepository(ctrl *gomock.Controller) *MockAccountsRepository {
	mock := &MockAccountsRepository{ctrl: ctrl}
	mock.recorder = &MockAccountsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountsRepository) EXPECT() *MockAccountsRepositoryMockRecorder {
	return m.recorder
}

// CountAccounts mocks base method.
func (m *MockAccountsRepository) CountAccounts(ctx context.Context, filter any, opts ...*options.CountOptions) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountAccounts", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAccounts indicates an expected call of CountAccounts.
func (mr *MockAccountsRepositoryMockRecorder) CountAccounts(ctx, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAccounts", reflect.TypeOf((*MockAccountsRepository)(nil).CountAccounts), varargs...)
}

// FindAccounts mocks base method.
func (m *MockAccountsRepository) FindAccounts(ctx context.Context, filter bson.M, opts ...*options.FindOptions) ([]*models.Accounts, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAccounts", varargs...)
	ret0, _ := ret[0].([]*models.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAccounts indicates an expected call of FindAccounts.
func (mr *MockAccountsRepositoryMockRecorder) FindAccounts(ctx, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAccounts", reflect.TypeOf((*MockAccountsRepository)(nil).FindAccounts), varargs...)
}

// FindOneAccounts mocks base method.
func (m *MockAccountsRepository) FindOneAccounts(ctx context.Context, filter bson.M, opts ...*options.FindOneOptions) (*models.Accounts, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOneAccounts", varargs...)
	ret0, _ := ret[0].(*models.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneAccounts indicates an expected call of FindOneAccounts.
func (mr *MockAccountsRepositoryMockRecorder) FindOneAccounts(ctx, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneAccounts", reflect.TypeOf((*MockAccountsRepository)(nil).FindOneAccounts), varargs...)
}

// UpdateOneAccounts mocks base method.
func (m *MockAccountsRepository) UpdateOneAccounts(ctx context.Context, filter, update any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOneAccounts", ctx, filter, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOneAccounts indicates an expected call of UpdateOneAccounts.
func (mr *MockAccountsRepositoryMockRecorder) UpdateOneAccounts(ctx, filter, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOneAccounts", reflect.TypeOf((*MockAccountsRepository)(nil).UpdateOneAccounts), ctx, filter, update)
}
